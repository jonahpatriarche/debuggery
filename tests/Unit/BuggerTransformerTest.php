<?php

namespace Tests\Unit;

use App\Bugger;
use App\Transformers\BuggerTransformer;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Log;
use Symfony\Component\CssSelector\Exception\ParseException;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

/**
 * Class BuggerTransformerTest
 *
 * @group transform
 * @package Tests\Unit
 */
class BuggerTransformerTest extends TestCase
{



    /**
     * @test
     */
    public function it_transforms_message_of_ModelNotFound_exception()
    {
        /** * * * *
         * SETUP  *
         * * * * **/
        $e = new ModelNotFoundException();
        $e->setModel(Bugger::class, 66);
        Log::error($e);

        $transformer = new BuggerTransformer();
        $bugger = Bugger::orderBy('id', 'desc')->first();

        /** * * *
         * ACT  *
         * * * **/
        $data = $transformer->transform($bugger);

        /** * * *
         * TEST *
         * * * **/
        $this->assertEquals($e->getMessage(), $data['message']);
    }

    /**
     * @test
     */
    public function it_transforms_message_of_exception_error_with_blank_message_to_exception_class()
    {
        /** * * * *
         * SETUP  *
         * * * * **/
        $e = new \Exception('');
        Log::error($e);

        $transformer = new BuggerTransformer();
        $bugger = Bugger::orderBy('id', 'desc')->first();

        /** * * *
         * ACT  *
         * * * **/
        $data = $transformer->transform($bugger);

        /** * * *
         * TEST *
         * * * **/
        $this->assertEquals($e->getMessage(), $data['message']);
    }

    /**
     * Check if transformer fails with no stack trace
     *
     * @test
     */
    public function it_transforms_message_of_error_with_class_name_but_no_stack_trace()
    {
        /** * * * *
         * SETUP  *
         * * * * **/
        $message = 'ErrorTest: This has no stack trace';
        Log::error($message); // log message directly so no stack trace is generated by exception

        $transformer = new BuggerTransformer();
        $bugger = Bugger::orderBy('id', 'desc')->first();

        /** * * *
         * ACT  *
         * * * **/
        try {
            $data = $transformer->transform($bugger);
        }
        catch (\Exception $e) {
            $this->assertTrue(false); // exception = fail, yo
        }

        /** * * *
         * TEST *
         * * * **/
        $this->assertEquals('This has no stack trace', $data['message']);
    }

    /**
    * @group uut
     * Check if transformer fails with no stack trace
     *
     * @test
     */
    public function it_transforms_error_message_with_no_class_name()
    {
        /** * * * *
         * SETUP  *
         * * * * **/
        $e       = new \Exception(); // easy way to grab a stack trace and file name for the error message
        $message = 'This has no error name';
        $file = ' in ' . $e->getFile();
        $trace = ' Stack trace: ' . $e->getTraceAsString();
        Log::error($message . $file . $trace);

        $transformer = new BuggerTransformer();
        $bugger = Bugger::orderBy('id', 'desc')->first();

        /** * * *
         * ACT  *
         * * * **/
        try {
            $data = $transformer->transform($bugger);
        }
        catch (\Exception $e) {
            $this->assertTrue(false); // exception = fail, yo
        }

        /** * * *
         * TEST *
         * * * **/
        $this->assertEquals($message, $data['message']);
    }
}
